import type { BuildPayload } from './types';

function escapeHTML(content: string): string {
  return content
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#39;');
}

export function generateSimpleApp(
  plan: string,
  branding: BuildPayload['branding'],
  projectName: string
): Record<string, string> {
  const appName = branding?.name || 'My AI App';
  const tagline = branding?.tagline || 'An AI-powered experience';
  const primaryColor = branding?.palette?.primary || '#0066cc';
  const escapedPlan = escapeHTML(plan);
  const today = new Date().toISOString().split('T')[0];

  const indexHtml = `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>${appName}</title>
  <link rel="stylesheet" href="/styles.css" />
</head>
<body>
  <header class="header">
    <h1>${appName}</h1>
    <p class="tagline">${tagline}</p>
  </header>
  <main class="container">
    <h2>MVP Plan</h2>
    <pre>${escapedPlan}</pre>
  </main>
  <footer class="footer">
    <p>Generated by AI on ${new Date().toLocaleDateString()}</p>
  </footer>
  <script src="/app.js"></script>
</body>
</html>`;

  const stylesCss = `body {
  font-family: sans-serif;
  background: #f5f5f5;
  color: #333;
  margin: 0;
  padding: 0;
  line-height: 1.6;
}
.header {
  background: ${primaryColor};
  color: #fff;
  padding: 1rem;
  text-align: center;
}
.container {
  max-width: 800px;
  margin: 2rem auto;
  padding: 0 1rem;
}
.footer {
  text-align: center;
  padding: 1rem;
  font-size: 0.8rem;
  color: #666;
}`;

  const appJs = `window.addEventListener("DOMContentLoaded", () => {
  console.log("App loaded");
});`;

  const functionsIndexTs = `export default {
  async fetch(request) {
    const url = new URL(request.url);
    const path = url.pathname;

    const files = {
      "/": { content: ` + "`" + indexHtml + "`" + `, type: "text/html; charset=utf-8" },
      "/index.html": { content: ` + "`" + indexHtml + "`" + `, type: "text/html; charset=utf-8" },
      "/styles.css": { content: ` + "`" + stylesCss + "`" + `, type: "text/css" },
      "/app.js": { content: ` + "`" + appJs + "`" + `, type: "application/javascript" },
    };

    const file = files[path] || files["/"];
    return new Response(file.content, {
      headers: { "Content-Type": file.type }
    });
  }
};`;

  const wranglerToml = `name = "${projectName}"
main = "functions/index.ts"
compatibility_date = "${today}"
`;

  const tsconfigJson = `{
  "compilerOptions": {
    "target": "es2017",
    "downlevelIteration": true,
    "module": "esnext",
    "moduleResolution": "node",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true
  }
}`;

  const deployWorkflow = `name: Deploy to Cloudflare Workers

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: 