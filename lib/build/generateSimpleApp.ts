import type { BuildPayload } from './types';

function escapeHTML(content: string): string {
  return content
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#39;');
}

export function generateSimpleApp(
  plan: string,
  branding: BuildPayload['branding'],
  projectName: string
): Record<string, string> {
  const appName = branding?.name || 'My AI App';
  const tagline = branding?.tagline || 'An AI-powered experience';
  const primaryColor = branding?.palette?.primary || '#0066cc';

  const planText = typeof plan === 'string' ? plan : JSON.stringify(plan, null, 2);
  const escapedPlan = escapeHTML(planText);
  const today = new Date().toISOString().split('T')[0];
  const dateStr = new Date().toLocaleDateString();

  const indexHtml = `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>${appName}</title>
  <link rel="stylesheet" href="styles.css" />
</head>
<body>
  <div class="wrapper">
    <header class="header">
      <h1>${appName}</h1>
      <p class="tagline">${tagline}</p>
    </header>
    <main class="container">
      <h2>MVP Plan</h2>
      <pre>${escapedPlan}</pre>
    </main>
    <footer class="footer">
      <p>Generated by AI on ${dateStr}</p>
    </footer>
  </div>
  <script src="app.js"></script>
</body>
</html>`;

  const stylesCss = `body {
  margin: 0;
  padding: 0;
  font-family: system-ui, sans-serif;
  background: #f9f9f9;
  color: #333;
}
.wrapper {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}
.header {
  background: ${primaryColor};
  color: #fff;
  padding: 1.5rem;
  text-align: center;
}
.container {
  flex: 1;
  padding: 2rem;
  max-width: 800px;
  margin: 0 auto;
}
.footer {
  padding: 1rem;
  text-align: center;
  font-size: 0.9rem;
  color: #666;
}
pre {
  white-space: pre-wrap;
  word-break: break-word;
  background: #fff;
  padding: 1rem;
  border-radius: 0.5rem;
  border: 1px solid #ddd;
  overflow-x: auto;
}`;

  const appJs = `export function init() {
  console.log("App initialized");
}
window.addEventListener("DOMContentLoaded", init);`;

  const functionsIndexTs = `const files: Record<string, string> = {
  "/": \`${indexHtml}\`,
  "/index.html": \`${indexHtml}\`,
  "/styles.css": \`${stylesCss}\`,
  "/app.js": \`${appJs}\`
};

export default {
  async fetch(request: Request): Promise<Response> {
    const url = new URL(request.url);
    const path = url.pathname in files ? url.pathname : "/index.html";
    const content = files[path];
    const contentType = getContentType(path);
    return new Response(content, {
      headers: { "Content-Type": contentType }
    });
  }
};

function getContentType(path: string): string {
  if (path.endsWith(".html")) return "text/html";
  if (path.endsWith(".css")) return "text/css";
  if (path.endsWith(".js")) return "application/javascript";
  return "text/plain";
}
`;

  const wranglerToml = `name = "${projectName}"
main = "functions/index.ts"
compatibility_date = "${today}"
`;

  const tsconfigJson = `{
  "compilerOptions": {
    "target": "es2017",
    "downlevelIteration": true,
    "module": "esnext",
    "moduleResolution": "node",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true
  }
}`;

  const deployWorkflow = `name: Deploy to Cloudflare Workers

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: \${{ secrets.CLOUDFLARE_API_TOKEN }}
`;

  return {
    'index.html': indexHtml,
    'styles.css': stylesCss,
    'app.js': appJs,
    'functions/index.ts': functionsIndexTs,
    'wrangler.toml': wranglerToml,
    'tsconfig.json': tsconfigJson,
    '.github/workflows/deploy.yml': deployWorkflow
  };
}