// lib/build/sanitizeGeneratedFiles.ts

type FileInput = { path: string; content: string };
type FileOutput = { path: string; content: string };

/**
 * Cleans up raw backend chunks and removes markdown, explanations, and prose.
 */
function cleanBackendChunk(content: string): string {
  return content
    .split('\n')
    .map(line => line.trim())
    .filter(line => {
      if (!line) return false;
      if (/^\/\//.test(line)) return false; // comments
      if (/^#+\s/.test(line)) return false; // markdown headers
      if (/^\d+[\.\)]\s/.test(line)) return false; // numbered markdown
      if (/^\*\*.*\*\*$/.test(line)) return false; // bold markdown
      if (/^(This|The)\s.+(handler|function|file)/i.test(line)) return false; // prose
      if (/^[A-Z][\w\s]+[\.!?]$/.test(line)) return false; // sentence-style prose
      return true;
    })
    .join('\n');
}

/**
 * Attempts to classify content as HTML, CSS, or JS and map to a public/ path.
 */
function inferFrontendFiles(chunks: FileInput[]): FileOutput[] {
  return chunks.map((chunk, index) => {
    const content = chunk.content.trim();
    let ext = 'js';
    if (content.startsWith('<!DOCTYPE') || content.startsWith('<html')) {
      ext = 'html';
    } else if (content.startsWith('body') || content.includes('{') && content.includes('}')) {
      ext = 'css';
    }
    const path = `public/${['index', 'styles', 'app'][index] || `file${index}`}.${ext}`;
    return { path, content };
  });
}

/**
 * Converts and sanitizes agent-generated files to a valid deployable structure.
 */
export function sanitizeGeneratedFiles(files: FileInput[], meta: { ideaId: string }): FileOutput[] {
  const sanitized: FileOutput[] = [];

  const frontendChunks = files.filter(f => f.path.startsWith('frontend/'));
  const backendChunks = files.filter(f => f.path.startsWith('backend/'));
  const otherFiles = files.filter(f => !f.path.includes('/chunk_'));

  // Convert frontend chunks → public/*.*
  const frontendFiles = inferFrontendFiles(frontendChunks);
  sanitized.push(...frontendFiles);

  // Merge backend chunks → functions/index.ts
  const mergedBackend = backendChunks.map(f => cleanBackendChunk(f.content)).join('\n\n');
  if (mergedBackend.includes('onRequest')) {
    sanitized.push({
      path: 'functions/index.ts',
      content: `// Auto-generated by sanitizeGeneratedFiles\n${mergedBackend}`,
    });
  }

  // Preserve other non-chunk files
  sanitized.push(...otherFiles);

  return sanitized;
}