// lib/build/sanitizeGeneratedFiles.ts

type File = { path: string; content: string };

export function sanitizeGeneratedFiles(
  files: File[],
  context: { ideaId: string }
): File[] {
  const output: File[] = [];

  // Collect content by category
  const frontendChunks = files.filter((f) => f.path.startsWith("frontend/"));
  const backendChunks = files.filter((f) => f.path.startsWith("backend/"));
  const configFiles = files.filter((f) => f.path.startsWith("config/"));
  const publicChunks = files.filter((f) => f.path.startsWith("public/"));

  // 🧱 Frontend
  if (frontendChunks.length) {
    const html = frontendChunks.find((f) => f.content.includes("<!DOCTYPE html>"));
    const js = frontendChunks.find((f) => f.path.includes(".js"));
    const css = frontendChunks.find((f) => f.path.includes(".css"));

    if (html) output.push({ path: "public/index.html", content: html.content });
    if (js) output.push({ path: "public/app.js", content: js.content });
    if (css) output.push({ path: "public/styles.css", content: css.content });
  }

  // 🧱 Also include any public/ prefixed files as-is (e.g. manifest, logos)
  for (const f of publicChunks) {
    if (!f.path.endsWith(".txt")) {
      output.push({ path: f.path, content: f.content });
    }
  }

  // ⚙️ Config
  for (const f of configFiles) {
    if (!f.path.endsWith(".txt")) {
      output.push({ path: f.path, content: f.content });
    }
  }

  // 🧠 Backend → merge into functions/index.ts
  if (backendChunks.length) {
    const handlers = backendChunks.map((f, i) => ({
      name: `handler${i}`,
      content: f.content,
    }));

    const merged = [
      ...handlers.map((h) => `// From ${h.name}\n${h.content.trim()}\n`),
      `export default {`,
      ...handlers.map((h) => `  ...${h.name},`),
      `};`,
    ].join("\n");

    const indexTs = `// Auto-generated by sanitizeGeneratedFiles\n` + merged;
    output.push({ path: "functions/index.ts", content: indexTs });
  }

  // ✅ Pass-through wrangler.toml and deploy.yml
  const passthrough = files.filter((f) =>
    f.path === "wrangler.toml" || f.path === ".github/workflows/deploy.yml"
  );
  output.push(...passthrough);

  return output;
}