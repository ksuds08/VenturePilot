// utils/handleConfirmBuild.ts
import { getMvpStream } from "../lib/api";

export default function handleConfirmBuild(
  updateIdea: (id: any, updates: any) => void,
  setDeployLogs: (logs: string[]) => void,
  ideas: any[]
) {
  return async (id: any) => {
    const idea = ideas.find((i) => i.id === id);
    if (!idea || !idea.takeaways?.branding || !idea.messages?.length) {
      updateIdea(id, {
        deployError: "Missing ideaId, branding, or messages",
      });
      return;
    }

    updateIdea(id, { deploying: true });
    setDeployLogs([]);

    let messageAccumulator = [...idea.messages];

    // Add deployment intro message
    messageAccumulator = [
      ...messageAccumulator,
      {
        role: "assistant",
        content: "üöÄ Beginning MVP build and deployment...",
      },
    ];
    updateIdea(id, { messages: messageAccumulator });

    const appendLog = (line: string) => {
      messageAccumulator = [
        ...messageAccumulator,
        { role: "assistant", content: line },
      ];
      updateIdea(id, { messages: messageAccumulator });
    };

    try {
      await getMvpStream(
        idea.id,
        idea.takeaways.branding,
        idea.messages.map((m: any) => ({ role: m.role, content: m.content })),
        (log: string) => {
          setDeployLogs((prev) => [...prev, log]);
          appendLog(log);
        },
        (data: any) => {
          const { pagesUrl, repoUrl, plan } = data || {};

          if (pagesUrl) {
            const finalLine = `‚úÖ Deployment successful!

üîó [Live Site](${pagesUrl})  
üìÅ [GitHub Repo](${repoUrl || "https://github.com"})`;
            appendLog(finalLine);
            updateIdea(id, {
              deploying: false,
              deployed: true,
              repoUrl: repoUrl || "",
              pagesUrl: pagesUrl,
            });
          } else if (plan) {
            appendLog("‚úÖ Here‚Äôs the MVP build plan generated by the agent:\n\n" + plan);
            updateIdea(id, {
              deploying: false,
              takeaways: {
                ...idea.takeaways,
                finalPlan: plan,
              },
            });
          } else {
            appendLog("‚ö†Ô∏è Deployment completed but no URL or plan was returned.");
            updateIdea(id, { deploying: false });
          }
        },
        (errMsg: string) => {
          appendLog(`‚ùå Deployment failed: ${errMsg}`);
          updateIdea(id, {
            deploying: false,
            deployError: errMsg,
          });
        }
      );
    } catch (err: any) {
      const errMsg = err instanceof Error ? err.message : String(err);
      appendLog(`‚ùå Deployment failed: ${errMsg}`);
      updateIdea(id, {
        deploying: false,
        deployError: errMsg,
      });
    }
  };
}