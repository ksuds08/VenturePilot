import { getMvpStream } from "../lib/api";
import sanitizeMessages from "../utils/sanitizeMessages";
import type { Dispatch, SetStateAction } from "react";

type UseDeploymentHandlerParams = {
  ideas: any[];
  updateIdea: (id: string, updates: any) => void;
  setDeployLogs: Dispatch<SetStateAction<string[]>>;
};

export function useDeploymentHandler({
  ideas,
  updateIdea,
  setDeployLogs,
}: UseDeploymentHandlerParams) {
  const simulateStreamingLog = (ideaId: string, line: string) => {
    updateIdea(ideaId, (prev: any) => ({
      ...prev,
      messages: [
        ...(prev.messages || []),
        { role: "assistant", content: line },
      ],
    }));
  };

  const handleConfirmBuild = async (id: string) => {
    const idea = ideas.find((i) => i.id === id);
    if (!idea || !idea.takeaways?.branding || !idea.messages?.length) {
      updateIdea(id, {
        deployError: "Missing ideaId, branding, or messages",
      });
      return;
    }

    updateIdea(id, { deploying: true });
    setDeployLogs([]);

    let messageAccumulator = [...idea.messages];

    messageAccumulator = [
      ...messageAccumulator,
      {
        role: "assistant",
        content: "üöÄ Beginning MVP build and deployment...",
      },
    ];
    updateIdea(id, { messages: messageAccumulator });

    const appendLog = (line: string) => {
      messageAccumulator = [
        ...messageAccumulator,
        { role: "assistant", content: line },
      ];
      simulateStreamingLog(id, line);
    };

    try {
      await getMvpStream(
        idea.id,
        idea.takeaways.branding,
        sanitizeMessages(idea.messages),
        // onLog
        (log) => {
          setDeployLogs((prev) => [...prev, log]);
          appendLog(log);
        },
        // onDone
        (data) => {
          const { pagesUrl, repoUrl, plan } = data || {};

          if (pagesUrl) {
            const finalLine =
              `‚úÖ Deployment successful! Your site is live at ${pagesUrl}` +
              (repoUrl ? `\nGitHub repo: ${repoUrl}` : "");
            appendLog(finalLine);
            updateIdea(id, {
              deploying: false,
              deployed: true,
              repoUrl: repoUrl || "",
              pagesUrl,
            });
          } else if (plan) {
            appendLog("‚úÖ Here‚Äôs the MVP build plan generated by the agent:\n\n" + plan);
            updateIdea(id, {
              deploying: false,
              takeaways: {
                ...idea.takeaways,
                finalPlan: plan,
              },
            });
          } else {
            appendLog("‚ö†Ô∏è Deployment completed but no URL or plan was returned.");
            updateIdea(id, { deploying: false });
          }
        },
        // onError
        (errMsg) => {
          appendLog(`‚ùå Deployment failed: ${errMsg}`);
          updateIdea(id, {
            deploying: false,
            deployError: errMsg,
          });
        }
      );
    } catch (err: any) {
      const errMsg = err instanceof Error ? err.message : String(err);
      appendLog(`‚ùå Deployment failed: ${errMsg}`);
      updateIdea(id, {
        deploying: false,
        deployError: errMsg,
      });
    }
  };

  return handleConfirmBuild;
}